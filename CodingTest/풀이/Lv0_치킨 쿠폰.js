//! 링크 : https://school.programmers.co.kr/learn/courses/30/lessons/120884
//! 난이도 : Lv 0, 정답률 72% (2023/03/27)
//! 소요시간 : 2시간 30분
//! 풀이방법 : 복잡하게도 만들었다. while, if문으로 여러 조건들을 거치면서 서비스치킨수를 구하였다.
//! 개선할점 : 
            // 1. 코드가 내가봐도 참 복잡하다. 논리적으로 생각이 정리되고 간결해질수록 코드도 간결해질 수 있다.
            // 2. 문제 패턴(공식) 발견에도 노력을 기울여야한다.
            // 3.
            // 4. 

//^. 아래코드는 문제를 패턴(공식)화한 답안이다. 쿠폰 관련해결에는 응용이 가능한 코드이기 기억해놓자. parseInt(chicken-1)/(rule-1)
    /*
    const service = 10;
    const solution = chicken => {
        let result = parseInt( (chicken-1) / (service-1));
        return result
    }
    */



// 풀이방법
    // 581 -> 58개 쿠폰 신규생성, 1개 미사용, 
    // 58 -> 5개 쿠폰 신규생성, 8+1개 미사용, 
    // 5 -> 1개 쿠폰 신규생성, 8+1+1개 미사용
    // 5 -> 1개 쿠폰 신규생성
    // 신규생성 쿠폰 : 120개
    
    /*
    1. 필요한 값은 `서비스 받은 치킨의 수`이다.
    2. 분류를 해보자면 최초주문한치킨/먹은치킨/쿠폰을사용한치킨/쿠폰을사용하지못한치킨 ? -> 잘 모르겠따.
    3. 최초에 50마리를 주문했다면, 최초 서비스로 받는 치킨쿠폰이 생길 것이고, 이 시점 이후부터는 모두 `서비스 받은 치킨`에 속한다.
    4. 50주문 -> 미사용 쿠폰 5장 -> 5의 배수이므로 나눈 값을 뺌 -> 나머지 값을 다시 미사용 쿠폰에 더함
    */

// 테스트 과정
    /*
    1. 첫번째 제출시 1개의 테스트 케이스 실패(테스트 9번) - 수정완료(반례:1999)
    2. while반복문 들어가기전에 chicken의 수가 10미만인 경우에 문제발생 - 중간에 if문으로 거름
    */

const chicken = 1081;
const solution = chicken => {
let 미사용쿠폰 = 0;
let 신규생성쿠폰 = 0;

미사용쿠폰 += chicken%5 // 5으로 나눈 나머지 미사용으로 빼둠
chicken = Math.floor(chicken/5); // 최초 5으로 나눔;
신규생성쿠폰 += chicken
while(chicken>=5){ // chicken이 여전히 5 이상이면 반복
    미사용쿠폰 += chicken%5 
    chicken = Math.floor(chicken/5);
    신규생성쿠폰 += chicken
}

if(미사용쿠폰+chicken<5) {
    return 미사용쿠폰
}
while(미사용쿠폰>=5){ // 이번엔 쌓인 미사용쿠폰이 5이상이라면 반복
    신규생성쿠폰 += Math.floor(미사용쿠폰/5); // 신규생성된 쿠폰을 저장하고
    미사용쿠폰 = 미사용쿠폰%5 // 사용하지 못한 쿠폰은 다시 저장하고
}
console.log('chicken: ', chicken);
console.log('미사용쿠폰: ', 미사용쿠폰);

if(미사용쿠폰+chicken>=5) {
    let 짜투리 = 미사용쿠폰+chicken;
    console.log('짜투리: ', 짜투리);
    미사용쿠폰 += 짜투리%5 
    짜투리 = Math.floor(짜투리/5);
    신규생성쿠폰 += 짜투리
}else{
    신규생성쿠폰+=chicken
}
console.log(`미사용쿠폰: ${미사용쿠폰}, 신규생성쿠폰: ${신규생성쿠폰}, 치킨: ${chicken}`)
return 신규생성쿠폰
}

solution(chicken)


